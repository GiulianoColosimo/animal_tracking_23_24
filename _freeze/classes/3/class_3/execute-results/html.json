{
  "hash": "cbb9b61cd1c01bf26ab4c5bbd14327ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Animal tracking nella biologia della conservazione\"\nsubtitle: \"Class 3\"\ndate: \"2024-05-16\"\nfooter:  \"[Animal tracking nella biologia della conservazione - Giuliano Colosimo, PhD](https://giulianocolosimo.github.io/animal_tracking_23_24/)\"\nlogo: ../../figures/Tor-Vergata_logo_cmyk.png\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    chalkboard: \n      boardmarker-width: 5\neditor: visual\nfrom: markdown+emoji\nexecute:\n  freeze: auto\neditor_options: \n  chunk_output_type: console\nbibliography: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/comprehensive_database.bib\ncsl: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/apa_5th_edition.csl\ncitation_package: biblatex\ncitecolor: \"red\"\n---\n\n\n\n\n\n## Topics\n\n::: columns\n::: {.column width=\"50%\"}\n1.  [Setting up your computers]{style=\"color: green;\"}\n    -   [Packages to install]{style=\"color: green;\"}\n2.  [An introduction to Animal tracking]{style=\"color: green;\"}\n    -   [Tagging systems]{style=\"color: green;\"}\n3.  [CRS]{style=\"color: green;\"}\n    -   [Telemetry and GPS]{style=\"color: green;\"}\n4.  [Movement Data]{style=\"color: green;\"}\n5.  [On-line databases]{style=\"color: green;\"}\n    -   [GBIF]{style=\"color: green;\"}\n    -   [Movebank]{style=\"color: green;\"}\n:::\n\n::: {.column width=\"50%\"}\n6.  [Drivers of species distribution]{style=\"color: orange;\"}\n7.  [Home range estimates]{style=\"color: GhostWhite;\"}\n    -   [MPC]{style=\"color: GhostWhite;\"}\n    -   [KDE]{style=\"color: GhostWhite;\"}\n    -   [Kriging]{style=\"color: GhostWhite;\"}\n    -   [BBM]{style=\"color: GhostWhite;\"}\n8.  [Species distribution modeling]{style=\"color: GhostWhite;\"}\n    -   [Resource selection functions]{style=\"color: GhostWhite;\"}\n    -   [Step selection functions]{style=\"color: GhostWhite;\"}\n9.  [Modeling approaches]{style=\"color: GhostWhite;\"}\n:::\n:::\n\n## Drivers of species distribution\n\n-   Advances in ecological research have contributed to make the study and understanding of the distribution of biodiversity at various spatial and temporal scale a core aspect of macro-ecology and biodiversity research [@Guisan2020]\n-   Three main condition need to met in order for a species to occupy an area and maintain a viable population:\n    1.  the species has to reach the site\n    2.  the abiotic conditions have to be suitable for the species\n    3.  the biotic environment must be suitable for the species\n\n## Drivers of species distribution\n\n![Figure 3.1 after @Guisan2020](./ecoProcesses.png)\n\n## The abiotic environment\n\n-   How does the abiotic environment influence the distribution of organisms?\n-   What are the different types of environmental influences on species distribution?\n-   How do multiple variables jointly determine a species geographic distribution?\n-   Habitat: A description of environmental condition (abiotic and biotic) at a given locality at a particular scale of space and time, where organisms are or could potentially live\n-   Species can colonize a range of conditions along an environmental gradient, but in most cases the range occupies a small portion of all possible conditions\n-   The reasons lie in the physiology of organisms and the specific physiological adaptations that allow certain species to be better competitors in certain habitats and worst competitors in other\n\n## The abiotic environment\n\n-   The transition from optimal to poor performance in a specific habitat can be a smooth transition or an abrupt transition\n-   In conifer tree, the cambium activity allowing root growth tend to stop rather abruptly below ca. 7ºC at 10cm below ground [@Korner2021]\n-   Smoother transitions occur when the gradient has a linear effect on some metabolic rate, progressively lowering individual fitness\n-   All important variables should be considered jointly in an analysis in order to define what is known as the environmental niche of a species\n-   When considered jointly, the physiological responses of a given species to several environmental variables define a multidimensional volume called a species fundamental environmental niche\n-   For plants, the axes of the fundamental niche may typically be resource variable related to light, heat, water and nutrient variability [@Guisan2020]\n\n## The abiotic environment\n\n-   If we could estimate the species fundamental niche we would be able to make predictions about where the species could live and thrive\n\n-   In practice, measuring the fundamental niche based on field observation is practically impossible as interactions with other species should be factored in\n\n-   The response of species in nature is modified by the presence of other species within the same group or across groups combined with the effects of the changing environment.These effects constrint the fundamental niche to what is known as the realized niche\n\n-   Sometimes is not possible to measure and map the variables that actually have a measurable effect on species distribution\n\n## Movement pattern analysis\n\n-   Azimuth and turning angles:\n    -   direction of travel, directionality of movement, and relation to speed\n    -   recommended to exclude stationary segments from analysis\n-   Net square displacement (NSD):\n    -   quantifies the net squared distance traveled over time compared to an point of reference (calculates distance from each location to the point of reference)\n    -   point of reference (nest, den, colony) needed. If there is no point of reference, or animal is nomadic, use e.g. FPT\n\n## Movement pattern analysis\n\n-   First Time Passage (FTP)\n    -   calculates the time it takes to cross a circle of a given radius, i.e. time the animal spends in a given area at a certain spatial scale (”draws” circle around each point and calculates how long it takes to leave the circle)\n    -   the variance of log(fpt) can inform about the scales at which processes are likely to be changing\n    -   the slopes of the log(meanFPT) ∼ log(radii), can indicate the type of movement at each scale. Flatter slopes indicate more directional movement, steeper slopes more brownian movement\n\n## Install and load the appropriate toolset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"move\")\ninstall.packages(\"mapdata\")\ninstall.packages(\"scales\")\ninstall.packages(\"ggmap\")\ninstall.packages(\"mapproj\")\ninstall.packages(\"ggsn\") # or devtools::install_github('oswaldosantos/ggsn')\ninstall.packages(\"lubridate\")\ninstall.packages(\"circular\")\ninstall.packages(\"adehabitatLT\")\n```\n:::\n\n\n\n-   We can now load all the libraries that are going to be needed to run the exercise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(move)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: geosphere\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: raster\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'raster'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:plotly':\n\n    select\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:raster':\n\n    intersect, select, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(mapdata)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: maps\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:plotrix':\n\n    rescale\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Google's Terms of Service: <https://mapsplatform.google.com>\n  Stadia Maps' Terms of Service: <https://stadiamaps.com/terms-of-service/>\n  OpenStreetMap's Tile Usage Policy: <https://operations.osmfoundation.org/policies/tiles/>\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ggmap'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:plotly':\n\n    wind\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mapproj)\nlibrary(ggsn)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: grid\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPlease note that 'maptools' will be retired during October 2023,\nplan transition at your earliest convenience (see\nhttps://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs\nfor guidance);some functionality will be moved to 'sp'.\n Checking rgeos availability: TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ggsn'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:raster':\n\n    scalebar\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lubridate'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:raster':\n\n    intersect, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(circular)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'circular'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggmap':\n\n    wind\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:plotly':\n\n    wind\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    sd, var\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(adehabitatLT)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ade4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: adehabitatMA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 methods overwritten by 'adehabitatMA':\n  method                       from\n  print.SpatialPixelsDataFrame sp  \n  print.SpatialPixels          sp  \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'adehabitatMA'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:raster':\n\n    buffer\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: CircStats\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: MASS\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'MASS'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:raster':\n\n    area, select\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:plotly':\n\n    select\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: boot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'CircStats'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:circular':\n\n    A1, A1inv, deg, I.0, I.1, I.p, pp.plot, rad, rose.diag, rstable\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'adehabitatLT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    id\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:move':\n\n    burst\n```\n\n\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n-   Use [this](https://drive.proton.me/urls/JKGD8SYASR#qYRvkKaVjr10) link to download a .csv file with with the dataset we will be using\n-   Place the dataset in a directory where you will be working\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### We read in this dataset downloaded from Movebank directly as a move2 object\nbats <- move(\"/PATH TO YOUR DIRECTORY/Parti-colored bat Safi Switzerland.csv\")\nstr(bats)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nFormal class 'MoveStack' [package \"move\"] with 17 slots\n  ..@ trackId                : Factor w/ 17 levels \"X21\",\"X42\",\"X127\",..: 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ timestamps             : POSIXct[1:1740], format: \"2002-06-02 22:55:11\" \"2002-06-02 23:04:30\" ...\n  ..@ idData                 :'data.frame':\t17 obs. of  7 variables:\n  .. ..$ visible                        : Factor w/ 1 level \"true\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ manually.marked.outlier        : logi [1:17] NA NA NA NA NA NA ...\n  .. ..$ sensor.type                    : Factor w/ 1 level \"radio-transmitter\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ individual.taxon.canonical.name: Factor w/ 1 level \"Vespertilio murinus\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ tag.local.identifier           : Factor w/ 17 levels \"#1918725\",\"#1918728\",..: 8 9 10 11 12 1 2 3 13 4 ...\n  .. ..$ individual.local.identifier    : Factor w/ 17 levels \"X21\",\"X42\",\"X127\",..: 1 2 3 4 5 6 7 8 9 10 ...\n  .. ..$ study.name                     : Factor w/ 1 level \"Parti-colored bat Safi Switzerland\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ sensor                 : Factor w/ 1 level \"radio-transmitter\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..@ data                   :'data.frame':\t1740 obs. of  2 variables:\n  .. ..$ event.id : int [1:1740] 16309975 16309976 16309877 16309874 16309878 16309886 16309887 16309888 16309889 16309890 ...\n  .. ..$ timestamp: POSIXct[1:1740], format: \"2002-06-02 22:55:11\" \"2002-06-02 23:04:30\" ...\n  ..@ coords.nrs             : int [1:2] 3 4\n  ..@ coords                 : num [1:1740, 1:2] 8.6 8.61 8.61 8.6 8.6 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:1740] \"1\" \"2\" \"3\" \"4\" ...\n  .. .. ..$ : chr [1:2] \"location.long\" \"location.lat\"\n  ..@ bbox                   : num [1:2, 1:2] 7.03 46.9 8.69 47.66\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:2] \"location.long\" \"location.lat\"\n  .. .. ..$ : chr [1:2] \"min\" \"max\"\n  ..@ proj4string            :Formal class 'CRS' [package \"sp\"] with 1 slot\n  .. .. ..@ projargs: chr \"+proj=longlat +datum=WGS84 +no_defs\"\n  .. .. ..$ comment: chr \"GEOGCRS[\\\"unknown\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.25722\"| __truncated__\n  ..@ trackIdUnUsedRecords   : Factor w/ 17 levels \"X21\",\"X42\",\"X127\",..: \n  ..@ timestampsUnUsedRecords: 'POSIXct' num(0) \n - attr(*, \"tzone\")= chr \"UTC\"\n  ..@ sensorUnUsedRecords    : Factor w/ 1 level \"radio-transmitter\": \n  ..@ dataUnUsedRecords      :'data.frame':\t0 obs. of  4 variables:\n  .. ..$ event.id     : int(0) \n  .. ..$ timestamp    : 'POSIXct' num(0) \n - attr(*, \"tzone\")= chr \"UTC\"\n  .. ..$ location.long: num(0) \n  .. ..$ location.lat : num(0) \n  ..@ dateCreation           : POSIXct[1:1], format: \"2023-07-07 03:20:52\"\n  ..@ study                  : chr \"Parti-colored bat Safi Switzerland\"\n  ..@ citation               : chr(0) \n  ..@ license                : chr(0) \n```\n\n\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n### Basic plots 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bats)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/pda2-1.png){width=672}\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n### Basic plots 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bats, xlab=\"Longitude\", ylab=\"Latitude\", type=\"b\", pch=16, cex=0.5)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/pda3-1.png){width=672}\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n### Plot on a map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap('worldHires', col=\"grey\", fill=T)\npoints(t(colMeans(coordinates(bats))), col=alpha('red',0.5), pch=16)\npoints(t(colMeans(coordinates(bats))), col='cyan')\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/pda4-1.png){width=672}\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n### Plot on a zoomed map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(e<-bbox(extent(bats)*5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         min      max\ns1  3.691055 12.02844\ns2 45.388508 49.16696\n```\n\n\n:::\n\n```{.r .cell-code}\n# note here that the brackets around the assignment ensure that the result is also printed to the console\nmap('worldHires', xlim = e[1, ], ylim = e[2, ])\npoints(bats)\nlines(bats)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/pda5-1.png){width=672}\n:::\n:::\n\n\n\n## Preliminary data analysis\n\n### Plot on a google map background\n\n-   This code is not shown because it won't work for you unless you activate your personal google API key\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n! Bounding box given to Google - spatial extent only approximate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ <https://maps.googleapis.com/maps/api/staticmap?center=47.277732,7.859746&zoom=9&size=640x640&scale=2&maptype=terrain&language=en-EN&key=xxx>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/api-1.png){width=672}\n:::\n:::\n\n\n\n## Tidy your data\n\n-   We can identify and remove outliers after a graphical inspection of our data\n-   Download a new data set from [this link](https://drive.proton.me/urls/Z8YWTNZET8#lg4QAn0g2Qgk)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"PATH_TO_YOUR_DATA/buffalo_cleaned.Rdata\") # buffalo\n## Create gray scale\nbuffaloGray<-gray((nrow(idData(buffalo))-1):0/nrow(idData(buffalo)))\n## Plot with gray scale\nplot(buffalo, col=buffaloGray, xlab=\"Longitude\", ylab=\"Latitude\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](class_3_files/figure-html/tidyPoints2-1.png){width=672}\n:::\n:::\n\n\n\n## Tidy your data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## get the position of the coordinate that has the max longitude\nwhich.max(coordinates(buffalo)[,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24606\n```\n\n\n:::\n\n```{.r .cell-code}\n## drop the point with the largest coordinate values\nbuffalo <- buffalo[-which.max(coordinates(buffalo)[,1])]\nplot(buffalo, col=buffaloGray, xlab=\"Longitude\", ylab=\"Latitude\")\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/tidyPoints3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## save the clean dataset for the following days\nsave(buffalo, file=\"PATH_TO_YOUR_DIRECTORY/buffalos.Rdata\")\n```\n:::\n\n\n\n## Visualizing data for vulture\n\n-   Download the [Leo](https://drive.proton.me/urls/0ME89QYNS4#AY9gJIEXEqqq) dataset and put it in your working directory\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLeo <- move(\"PATH/TO/FILE/Leo-65545.csv.gz\")\nLeo\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : Move \nfeatures    : 35256 \nextent      : -108.8262, -68.58033, 7.16283, 53.82783  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 10\nnames       :  event.id,  timestamp, ground.speed, heading, height.raw, http...vocabulary.movebank.org.extended.raptor.workshop.attributes.migration.state,      utm.easting,     utm.northing, utm.zone, study.local.timestamp \nmin values  :   2333006, 1182024000,            0,       0,          0,                                                                                   , 169798.059287902, 791836.814945502,      12N,            1181991600 \nmax values  : 180011334, 1363680000,          110,     359,       1982,                                                                    SpringMigration, 829886.257338918, 5967229.98624054,      19N,            1363651200 \ntimestamps  : 2007-06-16 20:00:00 ... 2013-03-19 08:00:00 Time difference of 2102 days  (start ... end, duration) \nsensors     : gps \nindiv. data : behavioural.classification, manually.marked.outlier, http...vocabulary.movebank.org.extended.raptor.workshop.attributes.behaviour, http...vocabulary.movebank.org.extended.raptor.workshop.attributes.deployment.special.event, visible, sensor.type, individual.taxon.canonical.name, tag.local.identifier, individual.local.identifier, study.name, study.timezone \nindiv. value: NA NA NA NA true gps Cathartes aura 65545 Leo Turkey Vulture Acopian Center USA GPS Pacific Standard Time \nstudy name  : Turkey Vulture Acopian Center USA GPS \ndate created: 2023-07-07 03:20:52 \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap('worldHires', xlim = Leo@bbox[1, ]+c(-5,5), ylim = Leo@bbox[2, ]+c(-5,5),col=\"grey\", fill=T)\nlines(Leo, col=\"firebrick\", lwd=1.5)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/leo3-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing data for vulture\n\n### Check and tidy data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## get locations per year and month\ntapply(timestamps(Leo), list(year(timestamps(Leo)), month(timestamps(Leo))), length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1   2   3   4   5   6   7   8   9  10  11  12\n2007  NA  NA  NA  NA  NA 300 699 701 698 717 658 677\n2008 716 626 685 705 710 701 713 727 705 687 621 672\n2009 643 579 648 671 616 510 641 728 702 706 660 622\n2010 680 562 558 556 537 502 721 683 639 706 599 640\n2011 601 586 649 609 563 344 541 706 667 307  NA  NA\n2012  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA 321 444\n2013 432 404 255  NA  NA  NA  NA  NA  NA  NA  NA  NA\n```\n\n\n:::\n\n```{.r .cell-code}\n## removing years 2012-13 because there is a large gap\nLeo <- Leo[year(Leo$timestamp)<2012,]\ntapply(timestamps(Leo), list(year(timestamps(Leo)), month(timestamps(Leo))), length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1   2   3   4   5   6   7   8   9  10  11  12\n2007  NA  NA  NA  NA  NA 300 699 701 698 717 658 677\n2008 716 626 685 705 710 701 713 727 705 687 621 672\n2009 643 579 648 671 616 510 641 728 702 706 660 622\n2010 680 562 558 556 537 502 721 683 639 706 599 640\n2011 601 586 649 609 563 344 541 706 667 307  NA  NA\n```\n\n\n:::\n:::\n\n\n\n## Visualizing data for vulture\n\n### Azimuthal distribution of data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncategories<- c(\"1\"=\"Wintering\", \"2\"=\"Wintering\", \n               \"3\"=\"Wintering\", \"4\"=\"North migration\", \n               \"5\"=\"North migration\", \"6\"=\"Breeding\", \n               \"7\"=\"Breeding\", \"8\"=\"Breeding\", \n               \"9\"=\"South migration\", \"10\"=\"South migration\", \n               \"11\"=\"Wintering\", \"12\"=\"Wintering\")\n\n# assign the categories to a new variable based on the timestamp\nLeo$cat<-factor(categories[month(timestamps(Leo))],\n                levels=c(\"South migration\", \"Wintering\", \"North migration\", \"Breeding\"))\n\n# assign NA to segments where subsequent locations fall in different seasons\nLeo$cat[c(Leo$cat[-n.locs(Leo)]!=Leo$cat[-1], TRUE)] <- NA\n\n# store the information in a new data frame\nazimuth <- data.frame(D=angle(Leo),\n                      V=speed(Leo), \n                      Season=Leo$cat[-1])\n```\n:::\n\n\n\n## Visualizing data for vulture\n\n### Azimuthal distribution of data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the direction as a circular\nazimuth$Dcirc<-as.circular(azimuth$D, \n                           rotation=\"clock\", \n                           units=\"degrees\", \n                           type=\"angles\", \n                           modulo=\"asis\", \n                           zero=0, \n                           template=\"geographic\")\n\n# select segments above 2 m/s, we are only interested in segments when Leo is moving, and not the stationary error\nazimuth <- azimuth[azimuth$V>=2,]\n\n# remove missing values\nazimuth <- azimuth[complete.cases(azimuth),]\n\n# define a vector that is used to set the order of plotting\nseasons <- levels(Leo$cat)\n```\n:::\n\n\n\n## Visualizing data for vulture\n\n### Azimuthal distribution of data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change margins of plot\npar(mar=rep(1,4))\n\n# plot all the azimuths\nplot(azimuth$Dcirc, stack=T, shrink=1.6, pch=16, sep=0.05, col=\"grey\")\n\n# loop through seasons and plot a line denisty per season\nfor(i in 1:length(seasons)){\n  # subset the azimuth\n  x <- azimuth[azimuth$Season==seasons[i],'Dcirc']\n\n  # calculate density and plot as a line\n  lines(density(x, bw=180, kernel=\"vonmises\"), lwd=2, lty=i)\n\n  # draw an arrow showing mean and resultant length\n  arrows.circular(mean(x), y=rho.circular(x), lwd=2, length=0.1, lty=i)\n}\n\n# add a legend\nlegend(\"bottomleft\", lty=c(1,2,3,4), seasons, bty=\"n\", cex=0.85)\n```\n:::\n\n\n\n## Visualizing data for vulture\n\n### Azimuthal distribution of data\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](class_3_files/figure-html/leo8-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing randomly generated data\n\n### Net squared displacement\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate 500 tracks with 1000 steps, with different levels of correlation of turning angles (r) \n# and convert into move object\nsets <- sort(rep((0.8 + log10(c(seq(1,100, length.out=10)))/10)[1:9],500))\nrCRW <- lapply(lapply(sets, simm.crw, date=1:1000, h=1), as, \"Move\")\n\n# calculate NSD for all tracks, from origin of trajectory\nrNSD <- unlist(lapply(lapply(lapply(rCRW, coordinates), spDistsN1, pt=c(0,0)), \"^\", 2))\nmNSD <- tapply(rNSD, list(sort(rep(sets,1000)), rep(1:1000, length(sets))), mean)\n\npar(mar=c(5, 4, 4, 4) + 0.1)\nplot(0,0, type=\"n\", xlim=c(0,1300), ylim=c(0, max(mNSD)),\n     bty=\"n\", xlab=\"Step\", ylab=\"Net square distance\", xaxt=\"n\")\naxis(1, at=c(0,200,400,600,800,1000))\ntest <- apply(as.matrix(mNSD), 1, lines, x=1:1000)\ntext(cbind(rep(c(1250, 1100), length.out=length(row.names(mNSD))), mNSD[,ncol(mNSD)]), \n     paste(\"r=\", as.character(round(as.numeric(row.names(mNSD)),3)),sep=\"\"), cex=0.5)\n```\n:::\n\n\n\n## Visualizing randomly generated data\n\n### Net squared displacement\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](class_3_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing randomly generated data\n\n### Net squared displacement\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# - r=0.99: very correlated, movement almost in a steady direction, it's walking away from the origin.\nplot(rCRW[[4500]], pch=19)\npoints(rCRW[[4500]][1], col=\"green3\", pch=20)\npoints(rCRW[[4500]][1000], col=\"red\", pch=20)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Visualizing randomly generated data\n\n### Net squared displacement\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# - r=0.8: fairly correlated. movement is wiggly. For example:\nplot(rCRW[[1]], pch=19)\npoints(rCRW[[1]][1], col=\"green3\", pch=20)\npoints(rCRW[[1]][1000], col=\"red\", pch=20)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}