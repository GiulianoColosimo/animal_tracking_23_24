{
  "hash": "378693cccf8db77729cd89ab174766de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Animal tracking nella biologia della conservazione\"\nsubtitle: \"Class 4\"\ndate: \"2024-05-21\"\nfooter:  \"[Animal tracking nella biologia della conservazione - Giuliano Colosimo, PhD](https://giulianocolosimo.github.io/animal_tracking_23_24/)\"\nlogo: ../../figures/Tor-Vergata_logo_cmyk.png\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    theme: slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    chalkboard: \n      boardmarker-width: 5\neditor: visual\nfrom: markdown+emoji\nexecute:\n  freeze: auto\neditor_options: \n  chunk_output_type: console\nbibliography: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/comprehensive_database.bib\ncsl: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/apa_5th_edition.csl\ncitation_package: biblatex\ncitecolor: \"red\"\n---\n\n\n\n\n\n## Package to load for the class\n\n- If you do not yet have the packages installed, remember to install it first!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(spData)\nlibrary(raster)\nlibrary(spDataLarge)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(tidyr)\n```\n:::\n\n\n\n## Using movement to inform conservation corridor design for Mojave desert tortoise\n\n- Study from @Hromada2020\n\n::: {layout-ncol=2}\n![*Gopherus agassizii*. Image source: [Wikipedia](https://en.wikipedia.org/wiki/Desert_tortoise)](./des_tort_1.jpg)\n\n![*Gopherus agassizii*. Image source: [Wikipedia](https://en.wikipedia.org/wiki/Desert_tortoise)](./des_tort_2.jpg)\n:::\n\n##\n\n- Manuscript in which the authors integrate ecological aspects with genetic aspects (taken from the literature) to improve conservation practices for the species *G. agassizzi* (i.e., identification and maintenance of ecological corridors)\n- The aim is to identify regions of the landscape that serve to maintain or facilitate functional connections between populations of organisms through areas of inhospitable landscape\n- Usage and integration of different data types:\n    - Telemetry\n    - Opportunistic and designed sampling schemes\n    - GPS\n    - Raster data\n- Complex algorithms to estimate home ranges, path selection analysis, auto correlation and habitat modeling\n\n##\n\n::: {layout-ncol=2}\n![After @Hromada2020](./hromada_fig_1.png)\n\n![](./hromada_fig_2.png)\n:::\n\n##\n\n![After @Hromada2020](./hromada_fig_5.png)\n\n## Estimate distance between point A and point B\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(50821)  # makes sure the results are always the same \nx <- rnorm(20, 10, 2) # takes 20 random points from a normal distribution with mean 10 and sd 2\ny <- rnorm(20, 10, 2) \ndf_points <- data.frame(x = x, y = y) # create a data frame with points coordinates\npts_nms <- LETTERS[1:20]\nplot(df_points$x, df_points$y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == \"A\" | pts_nms == \"B\", \"red\", \"blue\"),\nxlab = \"X\", ylab = \"Y\")\ntext(x = df_points$x + 0.1, y = df_points$y + 0.1, labels = pts_nms)\narrows(df_points$x[1], df_points$y[1], df_points$x[2],\ndf_points$y[2], code = 3, angle = 20, col = \"darkgreen\", lwd = 1.5)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_points$x[1:2], df_points$y[1:2], xlim = c(min(df_points$x), max(df_points$x)),\n     ylim = c(min(df_points$y), max(df_points$y)), pch = 21, cex = 1.5,\n     bg = ifelse(pts_nms == \"A\" | pts_nms == \"B\", \"red\", \"blue\"), xlab = \"X\", ylab = \"Y\")\ntext(x = df_points$x[1:2] + 0.1, y = df_points$y[1:2] + 0.1, labels = pts_nms[1:2])\narrows(df_points$x[1], df_points$y[1], df_points$x[2], df_points$y[2], code = 3, angle = 20, col = \"darkgreen\", lwd = 1.5)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_points$x[1:2], df_points$y[1:2], xlim = c(min(df_points$x), max(df_points$x)),\n     ylim = c(min(df_points$y), max(df_points$y)), pch = 21, cex = 1.5,\n     bg = ifelse(pts_nms == \"A\" | pts_nms == \"B\", \"red\", \"blue\"), xlab = \"X\", ylab = \"Y\")\ntext(x = df_points$x[1:2] + 0.1, y = df_points$y[1:2] + 0.1, labels = pts_nms[1:2])\narrows(df_points$x[1], df_points$y[1], df_points$x[2], df_points$y[2], code = 3, angle = 20, col = \"darkgreen\", lwd = 1.5)\npoints(df_points$x[2], df_points$y[1], pch = 21, cex = 1.5, bg = \"gold\")\ntext(x = df_points$x[2]- 0.05, y = df_points$y[1] - 0.2, labels = \"Z\")\nsegments(df_points$x[2], df_points$y[1], df_points$x[1], df_points$y[1])\nsegments(df_points$x[2], df_points$y[1], df_points$x[2], df_points$y[2])\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_points$x, df_points$y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == \"A\", \"red\", \"blue\"), type = \"n\", xlab = \"X\", ylab = \"Y\")\narrows(df_points[1,1], df_points[1,2], df_points[-c(1),1], df_points[-c(1),2], code = 2, angle = 20, col = \"darkgreen\")\ntext(x = df_points$x + 0.1, y = df_points$y + 0.1, labels = pts_nms)\npoints(df_points$x, df_points$y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == \"A\", \"red\", \"blue\"))\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\neuc_dist <- function(df_points){\n  dist_mtx <- matrix(nrow = nrow(df_points), ncol = 1)\n  rownames(dist_mtx) <- LETTERS[1:20]\n  colnames(dist_mtx) <- LETTERS[1]\n  \n  for(i in 1:nrow(df_points)){\n    dist_mtx[i,1] <- sqrt((df_points[i,1]-df_points[1,1])^2 + (df_points[i,2]-df_points[1,2])^2)\n  }\n  return(dist_mtx)\n}\n\neuc_dist(df_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          A\nA 0.0000000\nB 2.4141666\nC 1.2826811\nD 1.7511601\nE 2.5444525\nF 3.5926128\nG 2.8015168\nH 1.8022465\nI 2.0540704\nJ 6.6493830\nK 3.6907997\nL 3.4774809\nM 5.9143237\nN 1.6434418\nO 1.6530842\nP 1.4285121\nQ 1.9120440\nR 3.1736863\nS 3.9128130\nT 0.8251141\n```\n\n\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == 1, \"red\", \"blue\"), type = \"n\", xlab = \"X\", ylab = \"Y\")\nfor(i in 1:nrow(df_points)){\n  for(e in 1:nrow(df_points)){\n    arrows(df_points[i,1], df_points[i,2], df_points[e,1], df_points[e,2], code = 0, angle = 20, col = \"darkgreen\")\n  }\n}\npoints(x, y, pch = 21, cex = 1.5, bg = \"blue\")\ntext(x = x + 0.1, y = y + 0.1, labels = pts_nms)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\neuc_dist <- function(df_points){\n  dist_mtx <- matrix(nrow = nrow(df_points), ncol = nrow(df_points))\n  \n  rownames(dist_mtx) <- LETTERS[1:20]\n  colnames(dist_mtx) <- LETTERS[1:20]\n  \n  for(i in 1:nrow(df_points)){\n    for(e in 1:nrow(df_points)){\n      dist_mtx[i,e] <- sqrt((df_points[e,1]-df_points[i,1])^2 + (df_points[e,2]-df_points[i,2])^2)\n    }\n  }\n  \n  return(dist_mtx)\n}\neuc_dist(df_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          A         B         C         D         E        F         G\nA 0.0000000 2.4141666 1.2826811 1.7511601 2.5444525 3.592613 2.8015168\nB 2.4141666 0.0000000 2.5388500 1.9559462 0.6252556 3.672660 1.3718953\nC 1.2826811 2.5388500 0.0000000 2.7947398 2.9403092 2.329524 2.2324902\nD 1.7511601 1.9559462 2.7947398 0.0000000 1.6169204 4.826038 3.1033327\nE 2.5444525 0.6252556 2.9403092 1.6169204 0.0000000 4.276272 1.9947632\nF 3.5926128 3.6726595 2.3295243 4.8260385 4.2762723 0.000000 2.4602639\nG 2.8015168 1.3718953 2.2324902 3.1033327 1.9947632 2.460264 0.0000000\nH 1.8022465 3.5161964 0.9806848 3.5244546 3.8936970 2.491238 3.1377308\nI 2.0540704 2.3266417 0.9282625 3.2188674 2.8671848 1.613286 1.5481756\nJ 6.6493830 5.5174180 5.5505464 7.3156972 6.1009107 3.497288 4.2170015\nK 3.6907997 2.3000563 2.8896266 4.1002658 2.9014825 2.192833 0.9977929\nL 3.4774809 5.2747974 4.6600109 3.4049427 5.0186601 6.977837 6.1371792\nM 5.9143237 3.5037243 5.7864689 5.1314395 3.5504843 5.774936 3.6441159\nN 1.6434418 2.2308794 0.5614954 2.8882605 2.7159267 1.986021 1.7098828\nO 1.6530842 2.8864797 0.4213270 3.2142644 3.3214075 2.054179 2.4117387\nP 1.4285121 2.1144637 2.5556261 0.3806453 1.8691262 4.683157 3.1402453\nQ 1.9120440 0.5965866 1.9424481 1.8852841 1.0763049 3.239762 1.2180744\nR 3.1736863 2.0335200 2.3529071 3.7043640 2.6565870 1.938412 0.6618261\nS 3.9128130 1.6171447 3.6571638 3.5326017 1.9532045 3.821983 1.5179509\nT 0.8251141 3.1939268 1.8535708 2.1175826 3.2468131 4.168010 3.6215322\n          H         I         J         K         L        M         N\nA 1.8022465 2.0540704  6.649383 3.6907997  3.477481 5.914324 1.6434418\nB 3.5161964 2.3266417  5.517418 2.3000563  5.274797 3.503724 2.2308794\nC 0.9806848 0.9282625  5.550546 2.8896266  4.660011 5.786469 0.5614954\nD 3.5244546 3.2188674  7.315697 4.1002658  3.404943 5.131440 2.8882605\nE 3.8936970 2.8671848  6.100911 2.9014825  5.018660 3.550484 2.7159267\nF 2.4912382 1.6132864  3.497288 2.1928327  6.977837 5.774936 1.9860207\nG 3.1377308 1.5481756  4.217002 0.9977929  6.137179 3.644116 1.7098828\nH 0.0000000 1.6472297  5.950981 3.6585381  4.681961 6.741531 1.4304874\nI 1.6472297 0.0000000  4.638216 2.0181121  5.518062 5.192018 0.4126190\nJ 5.9509814 4.6382162  0.000000 3.2285562 10.126096 5.349011 5.0461208\nK 3.6585381 2.0181121  3.228556 0.0000000  7.094377 3.582376 2.3284159\nL 4.6819614 5.5180618 10.126096 7.0943770  0.000000 8.526399 5.1054449\nM 6.7415307 5.1920177  5.349011 3.5823765  8.526399 0.000000 5.3158468\nN 1.4304874 0.4126190  5.046121 2.3284159  5.105445 5.315847 0.0000000\nO 0.7284806 0.9268876  5.399753 2.9446195  4.929623 6.027739 0.7121329\nP 3.2242607 3.0698826  7.323591 4.1359816  3.168254 5.414596 2.7128943\nQ 2.9196199 1.7909976  5.432268 2.2153682  5.010911 4.018786 1.6536934\nR 3.1388208 1.4928427  3.617406 0.5376002  6.601586 3.904835 1.7920129\nS 4.6057613 3.0609280  4.502133 1.7264551  6.889302 2.137629 3.1786153\nT 1.9804221 2.7374536  7.373481 4.4918899  2.810021 6.697063 2.3276348\n          O         P         Q         R        S         T\nA 1.6530842 1.4285121 1.9120440 3.1736863 3.912813 0.8251141\nB 2.8864797 2.1144637 0.5965866 2.0335200 1.617145 3.1939268\nC 0.4213270 2.5556261 1.9424481 2.3529071 3.657164 1.8535708\nD 3.2142644 0.3806453 1.8852841 3.7043640 3.532602 2.1175826\nE 3.3214075 1.8691262 1.0763049 2.6565870 1.953204 3.2468131\nF 2.0541792 4.6831569 3.2397625 1.9384122 3.821983 4.1680098\nG 2.4117387 3.1402453 1.2180744 0.6618261 1.517951 3.6215322\nH 0.7284806 3.2242607 2.9196199 3.1388208 4.605761 1.9804221\nI 0.9268876 3.0698826 1.7909976 1.4928427 3.060928 2.7374536\nJ 5.3997527 7.3235912 5.4322680 3.6174056 4.502133 7.3734812\nK 2.9446195 4.1359816 2.2153682 0.5376002 1.726455 4.4918899\nL 4.9296227 3.1682536 5.0109112 6.6015863 6.889302 2.8100207\nM 6.0277395 5.4145956 4.0187857 3.9048353 2.137629 6.6970626\nN 0.7121329 2.7128943 1.6536934 1.7920129 3.178615 2.3276348\nO 0.0000000 2.9689864 2.2944116 2.4194490 3.890335 2.1237714\nP 2.9689864 0.0000000 1.9355827 3.7066010 3.723583 1.7398600\nQ 2.2944116 1.9355827 0.0000000 1.8308565 2.005060 2.7212689\nR 2.4194490 3.7066010 1.8308565 0.0000000 1.885648 3.9673982\nS 3.8903352 3.7235834 2.0050599 1.8856483 0.000000 4.7260238\nT 2.1237714 1.7398600 2.7212689 3.9673982 4.726024 0.0000000\n```\n\n\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_points_2 <- data.frame(x = sort(x), y = sort(y))\nplot(df_points_2$x, df_points_2$y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == \"A\", \"red\", \"blue\"), type = \"n\", xlab = \"X\", ylab = \"Y\")\npoints(df_points_2$x, df_points_2$y, pch = 21, cex = 1.5, bg = ifelse(pts_nms == \"A\", \"red\", \"blue\"))\nfor (i in 1:(nrow(df_points_2)-1)) {\n  arrows(df_points_2[i,1], df_points_2[i,2], df_points_2[i+1,1], df_points_2[i+1, 2], code = 2, angle = 20, col = \"darkgreen\")\n}\ntext(x = df_points_2$x, y = df_points_2$y - 0.2, labels = pts_nms)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\neuc_cum_dist <- function(df_points){\n  # sum the distance between each consecutive point\n  # take the first point and estimate the distance from the second\n  i <-nrow(df_points) - 1\n  cumm_dist <- as.numeric(vector())\n  for (e in 1:i) {\n  cumm_dist <- c(cumm_dist, sqrt((df_points[e+1,1] - df_points[e,1])^2 + (df_points[e+1,2] - df_points[e,2])^2))\n  }\n  return(data.frame(\"D_b_P\" = cumm_dist,\n                    \"CD_b_P\" = cumsum(cumm_dist)))\n}\n\neuc_cum_dist(df_points_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       D_b_P    CD_b_P\n1  2.6906061  2.690606\n2  0.7349518  3.425558\n3  0.3201418  3.745700\n4  0.1204112  3.866111\n5  0.2437853  4.109896\n6  0.5352549  4.645151\n7  0.4615268  5.106678\n8  0.7763202  5.882998\n9  0.3619635  6.244962\n10 0.1556230  6.400585\n11 0.1414979  6.542082\n12 0.2528249  6.794907\n13 0.8718972  7.666805\n14 0.1146396  7.781444\n15 0.3590293  8.140473\n16 0.6057413  8.746215\n17 0.4114314  9.157646\n18 1.4836655 10.641312\n19 1.1764418 11.817753\n```\n\n\n:::\n:::\n\n\n## Creating a Simple Feature object from scratch\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_point_sfg1 = st_point(c(1, 5))\nmy_point_sfg2 = st_point(c(3, 3))\nmy_point_sfc = st_sfc(my_point_sfg1, my_point_sfg2, crs = 4326)\nmy_df = data.frame(name = c(\"first\", \"second\"))\nmy_point_sf = st_sf(my_df, geometry = my_point_sfc)\nmy_point_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 1 ymin: 3 xmax: 3 ymax: 5\nGeodetic CRS:  WGS 84\n    name    geometry\n1  first POINT (1 5)\n2 second POINT (3 3)\n```\n\n\n:::\n:::\n\n\n## Raster objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# shuttle radar topography mission \nraster_filepath = system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nnew_raster = raster(raster_filepath)\nnew_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 457, 465, 212505  (nrow, ncol, ncell)\nresolution : 0.0008333333, 0.0008333333  (x, y)\nextent     : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : srtm.tif \nnames      : srtm \nvalues     : 1024, 2892  (min, max)\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(new_raster)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Creating a raster from scratch\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create raster\nmy_raster = raster(nrows = 10, ncols = 20,\n                   xmn = 0, xmx = 20, ymn = -10, ymx = 0,\n                   crs = \"+init=epsg:4326\",\n                   vals = 1:200)\nplot(my_raster)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n## Creating a raster from scratch\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr = raster(matrix(sample(1:9, 100, replace = TRUE), 10, 10))\nplot(r)\n```\n\n::: {.cell-output-display}\n![](class_4_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n## References",
    "supporting": [
      "class_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}